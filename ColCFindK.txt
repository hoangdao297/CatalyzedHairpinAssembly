import numpy as np
import pandas as pd
from scipy.integrate import odeint
from sklearn.metrics import mean_squared_error
from math import sqrt
import matplotlib.pyplot as plt

#import data
df = pd.read_excel('ModelingNRLData.xlsx')
Time=df['Time'].values.tolist()
Concentration=df['C'].values.tolist()

# Catalyst + HC -> CHC (k0)
# CHC + H1 -> CH1 (k1)
# H2 + CH1 -> CH1H2 + CHC (k2)
# CH1CH2 +RP-> RF+ RQ (k3)

#Normalize data
def normalizedata(concentration):
    data=[]
    for i in concentration:
        data.append(i*0.2)
    return data

#function to solve differential equations of the system
def cha(y, t, k0, k1, k2, k3):
    ca, hc, chc, h1, ch1, h2, ch1h2, rp, rf = y
    dydt =  [-k0*ca*hc, -k0*ca*hc, k0*ca*hc-k1*chc*h1+k2*h2*ch1, -k1*h1*chc, k1*h1*chc-k2*h2*ch1,
             -k2*h2*ch1, k2*h2*ch1, -k3*ch1h2*rp, k3*ch1h2*rp]
    return dydt

#Set the initial concentration [ca, hc, chc, h1, ch1, h2, ch1h2, rp, rf]
y0=[0.02, 0.1, 0.0, 0.2, 0.0, 0.2, 0.0, 0.2, 0.0]

#Set time scale
t = np.linspace(0, 52, 52)

#finding k0 k1 k2 k3 function
def findK(data,cha,y0,t):
    k0=1;k1=1;k2=1;k3=0.1
    rmse=sqrt(mean_squared_error(data, odeint(cha, y0, t, args=(k0,k1,k2,k3))[:, 8]))
    for i0 in np.arange(45,47,0.1):
        for i1 in np.arange(7.6,9,0.1):
            for i2 in np.arange(15.9,17,0.1):
                for i3 in np.arange(0.1,2,0.1):
                    if (sqrt(mean_squared_error(data, odeint(cha, y0, t, args=(i0,i1,i2,i3))[:, 8]))<rmse):
                        rmse=sqrt(mean_squared_error(data, odeint(cha, y0, t, args=(i0,i1,i2,i3))[:, 8]))
                        k0=i0;k1=i1;k2=i2;k3=i3
    return [k0,k1,k2,k3]

#Call function
allK=findK(normalizedata(Concentration),cha,y0,t)
print(allK)
sol = odeint(cha, y0, t, args=(allK[0],allK[1],allK[2],allK[3]))

#Label for graphs
lca = "CAT(t)"
lh1 = "H1(t)"
lch1 = "CH1(t)"
xla = "Time (minutes)"
yla = "[C] (uM)"
lh2 = "H2(t)"
lch1h2 = "CH1H2(t)"
lrp = "RP(t)"
lrf = "RF(t)"

#Plotting
plt.figure(figsize=(20,20))
plt.scatter(x=Time,y=normalizedata(Concentration))
plt.plot(t, sol[:, 8], label = lrf)
plt.plot(t, sol[:, 6], label = lch1h2)
plt.plot(t, sol[:, 7], label = lrp)
plt.legend(loc='best')
plt.xlabel(xla)
plt.ylabel(yla)
plt.grid()
plt.savefig("NRLcolC.pdf")
plt.show()